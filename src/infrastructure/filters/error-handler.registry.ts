import { HttpStatus, Type } from '@nestjs/common';
import { DomainException } from '../../domain/exceptions/token.exception';

/**
 * ========================================
 * DEFINICIONES IMPORTANTES:
 * ========================================
 * 
 * üìã DTO (Data Transfer Object): Objeto que transporta datos entre capas.
 *    Ejemplo: ValidateTokenResponseDto - define la estructura de respuesta del endpoint
 * 
 * üéØ DECORATOR: Funci√≥n que modifica clases, m√©todos o propiedades usando @.
 *    Ejemplo: @ErrorHandler - registra autom√°ticamente una clase para manejar errores
 * 
 * üóÇÔ∏è REGISTRY PATTERN: Almac√©n central que guarda y busca objetos por clave.
 *    Ejemplo: Map que guarda "TokenExpiredException" ‚Üí TokenExpiredHandler
 * 
 * üèóÔ∏è ARQUITECTURA HEXAGONAL - CAPAS:
 *    üìä DOMAIN: Entidades y reglas de negocio (Token, excepciones)
 *    üìã APPLICATION: Casos de uso y DTOs (ValidateTokenUseCase)
 *    üé® PRESENTATION: Controllers y endpoints HTTP (AuthController)
 *    üîß INFRASTRUCTURE: Adaptadores externos (JWT, HTTP, Base de datos)
 * ========================================
 */

// PASO 1: Definir qu√© puede hacer un manejador de error
// INTERFACE: Contrato que define m√©todos que una clase debe implementar
interface ErrorHandler {
  canHandle(exception: DomainException): boolean;  // ¬øPuede manejar esta excepci√≥n?
  getHttpStatus(): HttpStatus;                     // ¬øQu√© c√≥digo HTTP retornar? (401, 404, etc.)
  getErrorCode(): string;                          // ¬øQu√© c√≥digo de error? ('TOKEN_EXPIRED', etc.)
}

// PASO 2: Definir qu√© informaci√≥n necesita el decorator
// METADATA: Informaci√≥n adicional que se adjunta a clases/m√©todos para configurarlos
interface ErrorHandlerMetadata {
  exceptionType: Type<DomainException>;  // Tipo de excepci√≥n a manejar (TokenExpiredException)
  httpStatus: HttpStatus;                // Status HTTP a retornar (401)
  errorCode: string;                     // C√≥digo de error ('TOKEN_EXPIRED')
}

// PASO 3: Crear un s√≠mbolo √∫nico para guardar metadata en las clases
// SYMBOL: Identificador √∫nico que evita colisiones con otras propiedades
const ERROR_HANDLER_METADATA = Symbol('error-handler-metadata');

/**
 * ========================================
 * üéØ DECORATOR PATTERN EXPLICADO:
 * ========================================
 * 
 * Un DECORATOR es una funci√≥n que modifica el comportamiento de clases/m√©todos.
 * Se ejecuta en TIEMPO DE COMPILACI√ìN, no en runtime.
 * 
 * VENTAJAS:
 * ‚úÖ C√≥digo m√°s limpio y declarativo
 * ‚úÖ Separaci√≥n de responsabilidades  
 * ‚úÖ Reutilizable en m√∫ltiples clases
 * ‚úÖ Configuraci√≥n centralizada
 * 
 * C√ìMO FUNCIONA:
 * 1. Node.js carga la clase decorada
 * 2. Ejecuta el decorator autom√°ticamente
 * 3. El decorator guarda informaci√≥n y registra la clase
 * 4. La clase queda lista para usar sin configuraci√≥n manual
 * 
 * Ejemplo: @ErrorHandler({ exceptionType: TokenExpiredException, httpStatus: 401, errorCode: 'TOKEN_EXPIRED' })
 * ========================================
 */
export function ErrorHandler(metadata: ErrorHandlerMetadata) {
  // FACTORY FUNCTION: Retorna una funci√≥n que recibe la clase decorada
  return function (target: any) {
    // PASO A: Guardar la metadata en la clase usando Reflect API
    // REFLECT: API de JavaScript para manipular metadata de objetos
    Reflect.defineMetadata(ERROR_HANDLER_METADATA, metadata, target);
    
    // PASO B: Auto-registrar la clase en el Registry (sin que el desarrollador tenga que hacerlo manual)
    ErrorHandlerRegistry.register(target);
  };
}

/**
 * ========================================
 * üóÇÔ∏è REGISTRY PATTERN EXPLICADO:
 * ========================================
 * 
 * Un REGISTRY es un almac√©n centralizado que guarda y busca objetos por clave.
 * Es como un directorio telef√≥nico: buscas por nombre y encuentras el n√∫mero.
 * 
 * VENTAJAS:
 * ‚úÖ Centraliza el registro de objetos
 * ‚úÖ B√∫squeda r√°pida O(1) usando Map
 * ‚úÖ Evita if/else complejos
 * ‚úÖ F√°cil de extender con nuevos handlers
 * 
 * EN NUESTRO CASO:
 * Busca: "TokenExpiredException" ‚Üí Encuentra: TokenExpiredHandler
 * Busca: "InvalidTokenException" ‚Üí Encuentra: InvalidTokenHandler
 * ========================================
 */
export class ErrorHandlerRegistry {
  // PASO 4: Map est√°tico que guarda: "NombreExcepci√≥n" -> HandlerInstance
  // MAP: Estructura de datos clave-valor con b√∫squeda O(1)
  // STATIC: Compartido entre todas las instancias de la clase
  // Ejemplo: "TokenExpiredException" -> instancia de TokenExpiredHandler
  private static handlers: Map<string, ErrorHandler> = new Map();

  // PASO 5: M√©todo para registrar un nuevo handler (llamado autom√°ticamente por el decorator)
  static register(handlerClass: any) {
    // Recuperar la metadata que el decorator guard√≥ en la clase
    const metadata: ErrorHandlerMetadata = Reflect.getMetadata(ERROR_HANDLER_METADATA, handlerClass);
    
    // Crear una instancia del handler
    const handler = new handlerClass();
    
    // Guardar en el Map: "TokenExpiredException" -> handler instance
    this.handlers.set(metadata.exceptionType.name, handler);
  }

  // PASO 6: Buscar el handler apropiado para una excepci√≥n espec√≠fica
  static getHandler(exception: DomainException): ErrorHandler | null {
    // Buscar en el Map usando el nombre de la clase de excepci√≥n
    // Ejemplo: si exception es TokenExpiredException, busca "TokenExpiredException" en el Map
    return this.handlers.get(exception.constructor.name) || null;
  }

  // PASO 7: M√©todo principal - dado una excepci√≥n, retorna el status y error code
  static getErrorMapping(exception: DomainException): { status: HttpStatus; errorCode: string } {
    // Buscar el handler apropiado
    const handler = this.getHandler(exception);
    
    if (handler) {
      // Si encontr√≥ handler, pedirle el status y error code
      return {
        status: handler.getHttpStatus(),     // 401
        errorCode: handler.getErrorCode()    // 'TOKEN_EXPIRED'
      };
    }
    
    // Si no hay handler registrado, retornar error gen√©rico
    return {
      status: HttpStatus.INTERNAL_SERVER_ERROR,  // 500
      errorCode: 'UNKNOWN_ERROR'
    };
  }
}