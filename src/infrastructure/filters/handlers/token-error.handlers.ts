import { HttpStatus } from '@nestjs/common';
import { 
  TokenExpiredException, 
  InvalidTokenException, 
  TokenNotFoundException,
  DomainException 
} from '../../../domain/exceptions/token.exception';
import { ErrorHandler } from '../error-handler.registry';

/**
 * ========================================
 * üîß CAPA INFRASTRUCTURE EXPLICADA:
 * ========================================
 * 
 * La capa INFRASTRUCTURE contiene adaptadores que conectan nuestra aplicaci√≥n
 * con el mundo exterior: bases de datos, APIs, servicios web, etc.
 * 
 * RESPONSABILIDADES:
 * üîå Adapters: Conectan con servicios externos (JWT, HTTP, DB)
 * üõ°Ô∏è Guards: Protegen endpoints (autenticaci√≥n, autorizaci√≥n)
 * üö® Filters: Manejan errores globalmente
 * üîÑ Interceptors: Transforman requests/responses
 * 
 * EN ESTE ARCHIVO:
 * Definimos handlers espec√≠ficos para cada tipo de error de tokens.
 * Cada handler sabe c√≥mo convertir una excepci√≥n del dominio en una respuesta HTTP.
 * ========================================
 */

// HANDLER 1: Para cuando el token est√° vencido
// El decorator @ErrorHandler se ejecuta cuando Node.js carga este archivo
// Autom√°ticamente registra esta clase en el Registry para manejar TokenExpiredException
@ErrorHandler({
  exceptionType: TokenExpiredException,    // "Si llega TokenExpiredException, usar esta clase"
  httpStatus: HttpStatus.UNAUTHORIZED,     // "Retornar HTTP 401"
  errorCode: 'TOKEN_EXPIRED'               // "Enviar c√≥digo 'TOKEN_EXPIRED' al frontend"
})
export class TokenExpiredHandler {
  // Verificar si esta clase puede manejar la excepci√≥n dada
  canHandle(exception: DomainException): boolean {
    return exception instanceof TokenExpiredException;  // S√≠, si es TokenExpiredException
  }

  // ¬øQu√© c√≥digo HTTP retornar?
  getHttpStatus(): HttpStatus {
    return HttpStatus.UNAUTHORIZED;  // 401 - No autorizado
  }

  // ¬øQu√© c√≥digo de error enviar al frontend?
  getErrorCode(): string {
    return 'TOKEN_EXPIRED';  // El frontend puede mostrar "Su sesi√≥n ha expirado"
  }
}

// HANDLER 2: Para cuando el token est√° malformado o es inv√°lido
@ErrorHandler({
  exceptionType: InvalidTokenException,    // "Si llega InvalidTokenException, usar esta clase"
  httpStatus: HttpStatus.UNAUTHORIZED,     // "Retornar HTTP 401"
  errorCode: 'INVALID_TOKEN'               // "Enviar c√≥digo 'INVALID_TOKEN' al frontend"
})
export class InvalidTokenHandler {
  // ¬øPuede manejar InvalidTokenException?
  canHandle(exception: DomainException): boolean {
    return exception instanceof InvalidTokenException;  // S√≠
  }

  // C√≥digo HTTP
  getHttpStatus(): HttpStatus {
    return HttpStatus.UNAUTHORIZED;  // 401
  }

  // C√≥digo para el frontend
  getErrorCode(): string {
    return 'INVALID_TOKEN';  // El frontend puede mostrar "Token inv√°lido"
  }
}

// HANDLER 3: Para cuando no se env√≠a el header Authorization
@ErrorHandler({
  exceptionType: TokenNotFoundException,   // "Si llega TokenNotFoundException, usar esta clase"
  httpStatus: HttpStatus.UNAUTHORIZED,     // "Retornar HTTP 401"
  errorCode: 'TOKEN_NOT_PROVIDED'          // "Enviar c√≥digo 'TOKEN_NOT_PROVIDED' al frontend"
})
export class TokenNotFoundHandler {
  // ¬øPuede manejar TokenNotFoundException?
  canHandle(exception: DomainException): boolean {
    return exception instanceof TokenNotFoundException;  // S√≠
  }

  // C√≥digo HTTP
  getHttpStatus(): HttpStatus {
    return HttpStatus.UNAUTHORIZED;  // 401
  }

  // C√≥digo para el frontend
  getErrorCode(): string {
    return 'TOKEN_NOT_PROVIDED';  // El frontend puede mostrar "Debe iniciar sesi√≥n"
  }
}