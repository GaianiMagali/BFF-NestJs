import {
  Injectable,
  CanActivate,
  ExecutionContext,
  Inject,
} from '@nestjs/common';
import { Request } from 'express';
import { Token } from '../../domain/entities/token.entity';
import { ValidateTokenUseCase } from '../../application/use-cases/validate-token.use-case';
import type { ITokenRepository } from '../../domain/repositories/token.repository';

/**
 * ========================================
 * üõ°Ô∏è GUARD PATTERN EXPLICADO:
 * ========================================
 * 
 * Un GUARD es un mecanismo de NestJS que decide si un request
 * puede acceder a un endpoint espec√≠fico. Act√∫a como un "portero".
 * 
 * CU√ÅNDO SE EJECUTA:
 * 1. Request llega al servidor
 * 2. NestJS ejecuta TODOS los guards del endpoint
 * 3. Si TODOS retornan true ‚Üí contin√∫a al controller
 * 4. Si ALGUNO retorna false ‚Üí bloquea y retorna 403
 * 5. Si lanza excepci√≥n ‚Üí la captura el Exception Filter
 * 
 * VENTAJAS:
 * ‚úÖ Protecci√≥n autom√°tica de endpoints
 * ‚úÖ L√≥gica de autenticaci√≥n centralizada
 * ‚úÖ Reutilizable en m√∫ltiples controllers
 * ‚úÖ Inyecci√≥n de datos en el request
 * 
 * DIFERENCIA CON MIDDLEWARE:
 * - Middleware: Se ejecuta antes de TODA la aplicaci√≥n
 * - Guard: Se ejecuta antes de ENDPOINTS ESPEC√çFICOS
 * ========================================
 */

// EXTENSI√ìN DE REQUEST: Define qu√© informaci√≥n adicional
// el guard inyectar√° en el objeto request para usar en el controller
interface RequestWithTokenData extends Request {
  user: Token;            // Token decodificado y validado
  validatedToken: string; // Token validado por la API externa
}

/**
 * ========================================
 * üîß CAPA INFRASTRUCTURE - GUARD
 * ========================================
 * 
 * Los GUARDS forman parte de la capa de infraestructura porque:
 * - Manejan aspectos t√©cnicos (HTTP headers, autenticaci√≥n)
 * - No contienen l√≥gica de negocio pura
 * - Se conectan con casos de uso de la capa de aplicaci√≥n
 * - Protegen la entrada a nuestro dominio
 * ========================================
 */
@Injectable()  // DECORATOR: Marca la clase como inyectable por el DI de NestJS
export class TokenValidationGuard implements CanActivate {
  
  // DEPENDENCY INJECTION: NestJS inyecta autom√°ticamente el caso de uso
  // El constructor recibe las dependencias que la clase necesita
  constructor(
    private readonly validateTokenUseCase: ValidateTokenUseCase,
    @Inject('ITokenRepository')
    private readonly tokenRepository: ITokenRepository,
  ) {}

  /**
   * ========================================
   * üîë M√âTODO CANACTIVATE - CORAZ√ìN DEL GUARD
   * ========================================
   * 
   * Este m√©todo decide si el request puede continuar al controller.
   * NestJS lo llama autom√°ticamente cuando se accede a un endpoint protegido.
   * 
   * RETURN VALUES:
   * - true: Request permitido ‚Üí contin√∫a al controller
   * - false: Request bloqueado ‚Üí NestJS retorna 403 Forbidden
   * - Exception: Error ‚Üí Exception Filter maneja la respuesta
   * 
   * EXECUTION CONTEXT:
   * Objeto de NestJS que contiene informaci√≥n sobre el request actual:
   * - HTTP request/response
   * - Controller y m√©todo que se va a ejecutar
   * - Metadata de decorators
   */
  async canActivate(context: ExecutionContext): Promise<boolean> {
    // PASO 1: Obtener el objeto Request HTTP del contexto
    // ExecutionContext es una abstracci√≥n, switchToHttp() nos da el contexto HTTP
    const request = context.switchToHttp().getRequest<RequestWithTokenData>();
    
    // PASO 2: Extraer el token del header Authorization
    // Busca el patr√≥n: "Authorization: Bearer <token>"
    const token = this.extractTokenFromHeader(request);

    // PASO 3: Delegar la validaci√≥n al caso de uso de la capa Application
    // IMPORTANTE: El guard NO hace validaci√≥n directa, delega al caso de uso
    // Esto mantiene la separaci√≥n de responsabilidades de la arquitectura hexagonal
    try {
      const validatedToken = await this.validateTokenUseCase.execute(token);
      
      // PASO 4: Si la validaci√≥n es exitosa, INYECTAR datos en el request
      // REQUEST ENHANCEMENT: Agregar informaci√≥n para que el controller la use
      // Decodificar el token original para obtener informaci√≥n b√°sica
      const decodedToken = await this.tokenRepository.validateToken(token!);
      
      if (decodedToken) {
        request.user = decodedToken;          // Token decodificado
        request.validatedToken = validatedToken; // Token validado por API externa
        return true;  // ‚úÖ PERMITIR acceso al endpoint
      }
      
      return false;  // ‚ùå DENEGAR acceso al endpoint
    } catch (error) {
      // Las excepciones espec√≠ficas las maneja el Exception Filter global
      throw error;
    }
  }

  /**
   * ========================================
   * üì§ EXTRACCI√ìN DE TOKEN DEL HEADER
   * ========================================
   * 
   * M√©todo utilitario que extrae el token JWT del header Authorization.
   * Maneja el formato est√°ndar: "Authorization: Bearer <token>"
   * 
   * FORMATOS SOPORTADOS:
   * ‚úÖ "Bearer eyJhbGciOiJIUzI1NiIsInR..." ‚Üí extrae el token
   * ‚ùå "Basic dXNlcjpwYXNz"              ‚Üí retorna undefined
   * ‚ùå "eyJhbGciOiJIUzI1NiIsInR..."      ‚Üí retorna undefined (falta "Bearer")
   * ‚ùå Header no presente                 ‚Üí retorna undefined
   * 
   * DESTRUCTURING EXPLICADO:
   * "Bearer token123".split(' ') ‚Üí ["Bearer", "token123"]
   * const [type, token] = ["Bearer", "token123"]
   * type = "Bearer", token = "token123"
   */
  private extractTokenFromHeader(request: RequestWithTokenData): string | undefined {
    // NULLISH COALESCING (??): Si authorization es null/undefined, usa array vac√≠o
    // OPTIONAL CHAINING (?.): Si headers es null/undefined, no explota
    const [type, token] = request.headers.authorization?.split(' ') ?? [];
    
    // CONDITIONAL RETURN: Solo retorna el token si el tipo es "Bearer"
    return type === 'Bearer' ? token : undefined;
  }
}

/**
 * ========================================
 * üîÑ FLUJO COMPLETO DEL GUARD:
 * ========================================
 * 
 * 1. üì® Cliente env√≠a: GET /api con Header "Authorization: Bearer <token>"
 * 2. üõ°Ô∏è NestJS ejecuta TokenValidationGuard.canActivate()
 * 3. üì§ Guard extrae token del header Authorization
 * 4. üîç Guard llama a ValidateTokenUseCase.execute(token)
 * 5. ‚ö° UseCase valida token y llama APIs externas
 * 6. ‚úÖ Si v√°lido: Guard inyecta datos en request y retorna true
 * 7. üéØ Controller recibe request con datos inyectados
 * 8. üìã Controller retorna respuesta usando datos del guard
 * 
 * üö® SI HAY ERROR:
 * - UseCase lanza excepci√≥n (TokenExpiredException, etc.)
 * - Exception Filter captura la excepci√≥n
 * - Filter retorna error HTTP estructurado al cliente
 * ========================================
 */