import { Injectable } from '@nestjs/common';
import * as jwt from 'jsonwebtoken';
import { ITokenRepository } from '../../domain/repositories/token.repository';
import { Token } from '../../domain/entities/token.entity';
import { JwtPayload } from '../../domain/value-objects/jwt-payload.value-object';
import { InvalidTokenException } from '../../domain/exceptions/token.exception';

/**
 * üîå ADAPTER - Implementaci√≥n JWT para validaci√≥n de tokens
 * 
 * ¬øQu√© es un Adapter en Arquitectura Hexagonal?
 * - Implementaci√≥n CONCRETA de un puerto (interface)
 * - Traduce entre el dominio y tecnolog√≠as externas
 * - Permite cambiar tecnolog√≠as sin afectar el dominio
 * - Es la capa m√°s externa - maneja detalles t√©cnicos
 * 
 * ¬øPor qu√© JwtAdapter es un Adapter?
 * - Implementa el puerto ITokenRepository 
 * - Usa la librer√≠a 'jsonwebtoken' (tecnolog√≠a espec√≠fica)
 * - Traduce de JWT crudo a objetos del dominio (Token)
 * - Se puede reemplazar por OAuthAdapter, Auth0Adapter, etc.
 * 
 * PATRONES APLICADOS:
 * - Adapter Pattern: convierte interface incompatible (JWT) a compatible (dominio)
 * - Dependency Inversion: el dominio define qu√© necesita, no c√≥mo lo obtiene
 * - Template Method: validateToken define el algoritmo, m√©todos privados los pasos
 */
@Injectable()
export class JwtAdapter implements ITokenRepository {
  
  /**
   * üéØ M√âTODO PRINCIPAL - Validar y parsear token JWT
   * 
   * ALGORITMO (Template Method Pattern):
   * 1. Limpiar token (quitar "Bearer ")
   * 2. Decodificar JWT (SIN verificar firma - eso es responsabilidad del BFF)
   * 3. Validar estructura del payload
   * 4. Crear objetos del dominio
   * 5. Manejar errores de forma consistente
   * 
   * ¬øPor qu√© jwt.decode() y no jwt.verify()?
   * - El BFF solo valida estructura y expiraci√≥n LOCAL
   * - La verificaci√≥n de firma la hace la API externa
   * - Esto permite que el BFF funcione como proxy/gateway
   * 
   * @param tokenValue - Token crudo del header Authorization
   * @returns Token del dominio o null si es inv√°lido
   * @throws InvalidTokenException si el token no es v√°lido
   */
  async validateToken(tokenValue: string): Promise<Token | null> {
    try {
      // üßπ PASO 1: Limpiar token
      const cleanToken = this.extractBearerToken(tokenValue);
      
      // üîç PASO 2: Decodificar JWT (sin verificar firma)
      const decoded = jwt.decode(cleanToken) as any;
      
      if (!decoded) {
        throw new InvalidTokenException();
      }

      // ‚úÖ PASO 3: Validar estructura ANTES de crear objetos del dominio
      this.validatePayloadStructure(decoded);

      // üè≠ PASO 4: Crear objetos del dominio usando Factory Methods
      const payload = JwtPayload.fromDecodedToken(decoded);
      return new Token(payload);
      
    } catch (error) {
      // üîÑ PASO 5: Manejo consistente de errores
      if (error instanceof InvalidTokenException) {
        throw error; // Re-lanza excepciones del dominio
      }
      // Cualquier error t√©cnico (JSON malformado, etc.) se convierte a dominio
      throw new InvalidTokenException();
    }
  }

  /**
   * üîí M√âTODO PRIVADO - Validar estructura del payload
   * 
   * PATR√ìN: Guard Clause / Fail Fast
   * - Valida cada condici√≥n y falla inmediatamente
   * - Evita nesting excesivo con if/else anidados
   * - Hace el c√≥digo m√°s legible y mantenible
   * 
   * RESPONSABILIDADES:
   * - Verificar que el payload sea un objeto
   * - Verificar presencia de campos requeridos
   * - Verificar tipos de datos correctos
   * 
   * ¬øPor qu√© validar tipos aqu√≠ y no en el Value Object?
   * - El Value Object asume datos v√°lidos (contract by design)
   * - El Adapter es responsable de la conversi√≥n desde datos externos
   * - Separaci√≥n clara: Adapter valida formato, Domain valida negocio
   * 
   * @param payload - Objeto decodificado del JWT
   * @throws InvalidTokenException si la estructura es inv√°lida
   */
  private validatePayloadStructure(payload: any): void {
    // üö® Guard: Verificar que sea un objeto
    if (!payload || typeof payload !== 'object') {
      throw new InvalidTokenException();
    }

    // üö® Guard: Verificar presencia de campos requeridos
    const requiredFields = ['sub', 'username', 'exp', 'iss'];
    
    for (const field of requiredFields) {
      if (!(field in payload)) {
        throw new InvalidTokenException();
      }
    }

    // üö® Guard: Verificar tipos de datos
    if (typeof payload.sub !== 'string' || 
        typeof payload.username !== 'string' || 
        typeof payload.exp !== 'number' || 
        typeof payload.iss !== 'string') {
      throw new InvalidTokenException();
    }
  }

  /**
   * üßπ M√âTODO PRIVADO - Extraer token del formato "Bearer"
   * 
   * PATR√ìN: Utility Method
   * - Maneja un detalle t√©cnico espec√≠fico del protocolo HTTP
   * - A√≠sla la l√≥gica de parsing del header Authorization
   * - Permite cambios futuros sin afectar el m√©todo principal
   * 
   * CASOS MANEJADOS:
   * - "Bearer eyJhbGciOiJ..." ‚Üí "eyJhbGciOiJ..."
   * - "eyJhbGciOiJ..." ‚Üí "eyJhbGciOiJ..." (sin cambios)
   * 
   * @param tokenValue - Valor del header Authorization
   * @returns Token limpio sin prefijo "Bearer "
   */
  private extractBearerToken(tokenValue: string): string {
    if (tokenValue.startsWith('Bearer ')) {
      return tokenValue.substring(7); // Remueve "Bearer " (7 caracteres)
    }
    return tokenValue;
  }
}