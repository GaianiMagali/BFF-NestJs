import { Controller, Get, UseGuards, Req, Inject } from '@nestjs/common';
import { Request } from 'express';
import { TokenValidationGuard } from '../guards/token-validation.guard';
import { ValidateTokenUseCase } from '../../application/use-cases/validate-token.use-case';
import { TokenValidationResponseDto } from '../../application/dtos/token-validation-response.dto';
import type { ILoggerPort } from '../../../../shared/domain/ports/logger.port';

/**
 * üîß INTERFACE EXTENSION - Request con datos adicionales del Guard
 * 
 * Esta interface extiende el Request de Express para incluir datos
 * que el Guard agrega despu√©s de la validaci√≥n inicial.
 * 
 * ¬øPor qu√© extender Request?
 * - El Guard procesa el token y agrega datos √∫tiles al request
 * - Evita re-procesar el token en el controller
 * - Mantiene type safety en TypeScript
 * - Sigue el patr√≥n de middleware de Express/NestJS
 */
interface RequestWithTokenData extends Request {
  tokenValue: string;  // Token extra√≠do del header Authorization por el Guard
}

/**
 * üì° CONTROLLER - Punto de entrada HTTP para autenticaci√≥n
 * 
 * ¬øQu√© es un Controller en Arquitectura Hexagonal?
 * - DRIVING ADAPTER que conecta HTTP con el dominio
 * - Punto de entrada desde el mundo exterior hacia el n√∫cleo
 * - Traduce protocolos HTTP a llamadas de dominio (sin l√≥gica de negocio)
 * - Implementa la interfaz HTTP pero delega toda la l√≥gica a Use Cases
 * - Forma parte de la capa de Infrastructure (Adapters)
 * 
 * RESPONSABILIDADES del Controller:
 * - Definir rutas y m√©todos HTTP
 * - Extraer datos de la request (headers, body, params)
 * - Aplicar Guards y middlewares
 * - Ejecutar Use Cases
 * - Formatear respuestas HTTP
 * - NUNCA debe lanzar HttpException - deja que las excepciones de dominio burbujeen
 * 
 * PATRONES APLICADOS:
 * - Hexagonal Architecture: Driving Adapter que conecta HTTP con el dominio
 * - Dependency Injection: recibe Use Cases via DI
 * - Decorator Pattern: usa decorators de NestJS (@Get, @UseGuards, etc.)
 * - Adapter Pattern: traduce protocolos HTTP a llamadas de dominio
 * 
 * EJEMPLO DE REQUEST-RESPONSE:
 * 
 * REQUEST:
 * ```
 * GET / HTTP/1.1
 * Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
 * ```
 * 
 * RESPONSE (exitosa):
 * ```
 * HTTP/1.1 200 OK
 * Content-Type: application/json
 * 
 * {
 *   "message": "Validaci√≥n de token exitosa",
 *   "user": { "sub": "123", "username": "juan", "validated": true },
 *   "validatedToken": "renewed_eyJhbGciOiJ..."
 * }
 * ```
 * 
 * RESPONSE (error):
 * ```
 * HTTP/1.1 401 Unauthorized
 * Content-Type: application/json
 * 
 * {
 *   "error": true,
 *   "statusCode": 401,
 *   "errorCode": "TOKEN_EXPIRED",
 *   "message": "El token ha expirado",
 *   "layer": "Domain",
 *   "timestamp": "2025-01-20T10:30:00Z"
 * }
 * ```
 */
@Controller()  // Sin path = responde en la ra√≠z del m√≥dulo (/)
export class AuthController {
  constructor(
    private readonly validateTokenUseCase: ValidateTokenUseCase,  // üéØ Use Case para validar tokens
    @Inject('ILoggerPort')
    private readonly logger: ILoggerPort,                        // üîå Puerto para logging
  ) {}
  
  /**
   * üåê ENDPOINT - GET / (Validaci√≥n de token)
   * 
   * FLUJO DEL REQUEST:
   * 1. üõ°Ô∏è Guard intercepta y valida que hay token en headers
   * 2. üõ°Ô∏è Guard extrae token y lo agrega al request como tokenValue
   * 3. üì° Controller recibe request con tokenValue ya extra√≠do
   * 4. üéØ Controller ejecuta Use Case con el token
   * 5. üì¶ Use Case retorna DTO con respuesta exitosa
   * 6. üì° Controller retorna DTO (NestJS lo serializa autom√°ticamente a JSON)
   * 
   * ¬øPor qu√© es tan simple el controller?
   * - El Guard ya hizo la validaci√≥n inicial
   * - El Use Case maneja toda la l√≥gica compleja
   * - Los Exception Filters manejan los errores autom√°ticamente
   * - El controller solo hace de "traductor" HTTP ‚Üî Use Case
   * 
   * DECORATORS APLICADOS:
   * - @Get(): Define que responde a GET requests en la ruta ra√≠z
   * - @UseGuards(TokenValidationGuard): Aplica guard antes del m√©todo
   * - @Req(): Inyecta el objeto Request completo (con datos del Guard)
   * 
   * @param req - Request de Express con tokenValue agregado por el Guard
   * @returns Promise<TokenValidationResponseDto> - DTO con respuesta exitosa
   * 
   * ERRORES MANEJADOS AUTOM√ÅTICAMENTE (por Exception Filters):
   * - MissingTokenException ‚Üí 401 Unauthorized
   * - InvalidTokenException ‚Üí 401 Unauthorized  
   * - TokenExpiredException ‚Üí 401 Unauthorized
   * - UpstreamHttpException ‚Üí Status code espec√≠fico
   * - ExternalValidationException ‚Üí 503 Service Unavailable
   */
  @Get()
  @UseGuards(TokenValidationGuard)  // üõ°Ô∏è Guard ejecuta ANTES del m√©todo
  async validateToken(@Req() req: RequestWithTokenData): Promise<TokenValidationResponseDto> {
    // üìù PRINCIPIO: Keep Controllers Thin
    // El controller NO valida, NO procesa, NO maneja errores
    // Solo ejecuta el Use Case y retorna el resultado
    // Toda la l√≥gica compleja est√° en capas internas
    
    this.logger.debug('Processing token validation request', 'AuthController');
    
    // üéØ Ejecutar Use Case con token extra√≠do por el Guard
    // Si hay errores, los Exception Filters los manejar√°n autom√°ticamente
    return await this.validateTokenUseCase.execute(req.tokenValue);
  }

  /**
   * üîç ENDPOINT FUTURO - GET /me (obtener info del usuario actual)
   * 
   * Ejemplo de c√≥mo se ver√≠a otro endpoint usando el mismo Guard:
   */
  // @Get('me')
  // @UseGuards(TokenValidationGuard)
  // async getCurrentUser(@Req() req: RequestWithTokenData): Promise<UserInfoDto> {
  //   return await this.getCurrentUserUseCase.execute(req.tokenValue);
  // }
}